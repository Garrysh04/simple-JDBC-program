{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNed4+RE8V7EnjNrwM9yqYd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Garrysh04/simple-JDBC-program/blob/master/countries%20gdp%20by%20gold\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ETL Project: Extract, Transform, and Load (ETL) of GDP data from Wikipedia\n",
        "Purpose:\n",
        "This code extracts, transforms, and loads GDP data from Wikipedia into a CSV file and a SQLite database. The code also runs a query to select countries with GDPs of at least 100 billion USD in Gold."
      ],
      "metadata": {
        "id": "F6hKe2oP9AJl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SPSGmnMFWJRL",
        "outputId": "50a39516-ca05-44b6-9cb3-0a37bccc1ee2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SELECT * from Countries_by_GDP WHERE GDP_USD_gold >= 0\n",
            "              Country  GDP_USD_gold\n",
            "0       United States     410056.48\n",
            "1               China     295825.10\n",
            "2               Japan      67334.52\n",
            "3             Germany      65794.08\n",
            "4               India      57060.35\n",
            "..                ...           ...\n",
            "186  Marshall Islands          4.44\n",
            "187             Palau          4.00\n",
            "188          Kiribati          3.79\n",
            "189             Nauru          2.31\n",
            "190            Tuvalu          0.99\n",
            "\n",
            "[191 rows x 2 columns]\n",
            "SELECT * from Countries_by_GDP WHERE GDP_USD_gold >= 10000\n",
            "           Country  GDP_USD_gold\n",
            "0    United States     410056.48\n",
            "1            China     295825.10\n",
            "2            Japan      67334.52\n",
            "3          Germany      65794.08\n",
            "4            India      57060.35\n",
            "5   United Kingdom      48235.43\n",
            "6           France      44640.24\n",
            "7            Italy      33130.94\n",
            "8           Canada      31908.26\n",
            "9           Brazil      31779.43\n",
            "10          Russia      31495.63\n",
            "11     South Korea      26292.70\n",
            "12       Australia      26073.42\n",
            "13          Mexico      25395.69\n",
            "14           Spain      22788.70\n",
            "15       Indonesia      21251.76\n",
            "16     Netherlands      16504.50\n",
            "17    Saudi Arabia      16214.72\n",
            "18          Turkey      15716.95\n",
            "19     Switzerland      13278.38\n",
            "20          Taiwan      12074.03\n",
            "21          Poland      11435.14\n",
            "SELECT * from Countries_by_GDP WHERE GDP_USD_gold <= 10000\n",
            "              Country  GDP_USD_gold\n",
            "0           Argentina       9789.31\n",
            "1             Belgium       9531.96\n",
            "2              Sweden       9147.23\n",
            "3             Ireland       9071.54\n",
            "4            Thailand       8768.22\n",
            "..                ...           ...\n",
            "164  Marshall Islands          4.44\n",
            "165             Palau          4.00\n",
            "166          Kiribati          3.79\n",
            "167             Nauru          2.31\n",
            "168            Tuvalu          0.99\n",
            "\n",
            "[169 rows x 2 columns]\n",
            "SELECT * from Countries_by_GDP WHERE GDP_USD_gold > 0.1 AND GDP_USD_gold < 101;\n",
            "                             Country  GDP_USD_gold\n",
            "0                           Barbados         93.40\n",
            "1                               Fiji         82.23\n",
            "2                           Eswatini         73.66\n",
            "3                            Liberia         66.80\n",
            "4                           Djibouti         59.80\n",
            "5                            Andorra         56.02\n",
            "6                              Aruba         55.47\n",
            "7                       Sierra Leone         53.75\n",
            "8                           Suriname         52.99\n",
            "9                            Burundi         49.38\n",
            "10                            Belize         48.28\n",
            "11          Central African Republic         41.78\n",
            "12                            Bhutan         40.97\n",
            "13                           Eritrea         40.71\n",
            "14                           Lesotho         39.46\n",
            "15                        Cape Verde         37.69\n",
            "16                            Gambia         34.77\n",
            "17                       Saint Lucia         34.54\n",
            "18                        East Timor         30.36\n",
            "19                        Seychelles         29.78\n",
            "20                     Guinea-Bissau         28.81\n",
            "21               Antigua and Barbuda         28.46\n",
            "22                        San Marino         27.59\n",
            "23                   Solomon Islands         25.97\n",
            "24                           Comoros         20.58\n",
            "25                           Grenada         19.45\n",
            "26                           Vanuatu         16.25\n",
            "27             Saint Kitts and Nevis         16.06\n",
            "28  Saint Vincent and the Grenadines         15.87\n",
            "29                             Samoa         13.71\n",
            "30                          Dominica         10.40\n",
            "31             São Tomé and Príncipe          9.54\n",
            "32                             Tonga          8.26\n",
            "33                        Micronesia          6.96\n",
            "34                  Marshall Islands          4.44\n",
            "35                             Palau          4.00\n",
            "36                          Kiribati          3.79\n",
            "37                             Nauru          2.31\n",
            "38                            Tuvalu          0.99\n"
          ]
        }
      ],
      "source": [
        "from bs4 import BeautifulSoup\n",
        "import requests\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sqlite3\n",
        "from datetime import datetime\n",
        "\n",
        "url = 'https://web.archive.org/web/20230902185326/https://en.wikipedia.org/wiki/List_of_countries_by_GDP_%28nominal%29'\n",
        "table_attribs = [\"Country\", \"GDP_USD_millions\"]\n",
        "db_name = 'World_Economies.db'\n",
        "table_name = 'Countries_by_GDP'\n",
        "csv_path = './Countries_by_GDP.csv'\n",
        "\n",
        "def extract(url, table_attribs):\n",
        "    page = requests.get(url).text\n",
        "    data = BeautifulSoup(page,'html.parser')\n",
        "    df = pd.DataFrame(columns=table_attribs)\n",
        "    tables = data.find_all('tbody')\n",
        "    rows = tables[2].find_all('tr')\n",
        "    for row in rows:\n",
        "        col = row.find_all('td')\n",
        "        if len(col)!=0:\n",
        "            if col[0].find('a') is not None and '—' not in col[2]:\n",
        "                data_dict = {\"Country\": col[0].a.contents[0],\n",
        "                             \"GDP_USD_millions\": col[2].contents[0]}\n",
        "                df1 = pd.DataFrame(data_dict, index=[0])\n",
        "                df = pd.concat([df,df1], ignore_index=True)\n",
        "    return df\n",
        "\n",
        "def transform(df):\n",
        "    GDP_list = df[\"GDP_USD_millions\"].tolist()\n",
        "    GDP_list = [float(\"\".join(x.split(','))) for x in GDP_list]\n",
        "    GDP_list = [np.round(x/65.49,2) for x in GDP_list]\n",
        "    df[\"GDP_USD_millions\"] = GDP_list\n",
        "    df=df.rename(columns = {\"GDP_USD_millions\":\"GDP_USD_gold\"})\n",
        "    return df\n",
        "def calculate_gold_equivalent_weight(df):\n",
        "    GDP_list = [np.round(x/100000) for x in GDP_list]\n",
        "    df[\"GDP_USD_millions\"] = df['GDP_list']\n",
        "    df=df.rename(columns = {\"GDP_USD_gold\":\"GDP_USD_gold_qton\"})\n",
        "    return df\n",
        "\n",
        "def load_to_csv(df, csv_path):\n",
        "    df.to_csv(csv_path)\n",
        "\n",
        "def load_to_db(df, sql_connection, table_name):\n",
        "    df.to_sql(table_name, sql_connection, if_exists='replace', index=False)\n",
        "\n",
        "def run_query(query_statement, sql_connection):\n",
        "    print(query_statement)\n",
        "    query_output = pd.read_sql(query_statement, sql_connection)\n",
        "    print(query_output)\n",
        "\n",
        "def log_progress(message):\n",
        "    timestamp_format = '%Y-%h-%d-%H:%M:%S'\n",
        "    now = datetime.now()\n",
        "    timestamp = now.strftime(timestamp_format)\n",
        "    with open(\"./etl_project_log.txt\",\"a\") as f:\n",
        "        f.write(timestamp + ' : ' + message + '\\n')\n",
        "\n",
        "log_progress('Preliminaries complete. Initiating ETL process')\n",
        "\n",
        "df = extract(url, table_attribs)\n",
        "\n",
        "log_progress('Data extraction complete. Initiating Transformation process')\n",
        "\n",
        "df = transform(df)\n",
        "\n",
        "log_progress('Data transformation complete. Initiating loading process')\n",
        "\n",
        "load_to_csv(df, csv_path)\n",
        "\n",
        "log_progress('Data saved to CSV file')\n",
        "\n",
        "sql_connection = sqlite3.connect('World_Economies.db')\n",
        "\n",
        "log_progress('SQL Connection initiated.')\n",
        "\n",
        "load_to_db(df, sql_connection, table_name)\n",
        "\n",
        "log_progress('Data loaded to Database as table. Running the query')\n",
        "\n",
        "query_statement = f\"SELECT * from {table_name} WHERE GDP_USD_gold >= 0\"\n",
        "run_query(query_statement, sql_connection)\n",
        "\n",
        "query_statement = f\"SELECT * from {table_name} WHERE GDP_USD_gold >= 10000\"\n",
        "run_query(query_statement, sql_connection)\n",
        "\n",
        "query_statement = f\"SELECT * from {table_name} WHERE GDP_USD_gold <= 10000\"\n",
        "run_query(query_statement, sql_connection)\n",
        "\n",
        "\n",
        "query_statement = f\"SELECT * from {table_name} WHERE GDP_USD_gold > 0.1 AND GDP_USD_gold < 101;\"\n",
        "run_query(query_statement, sql_connection)\n",
        "\n",
        "log_progress('Process Complete.')\n",
        "\n",
        "\n",
        "sql_connection.close()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jj7VpK5-WLO4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The extract() function scrapes the Wikipedia page using BeautifulSoup and extracts the data into a Pandas DataFrame.\n",
        "The transform() function converts the GDP values from millions to billions and renames the column to \"GDP_USD_billions\".\n",
        "The load_to_csv() function saves the DataFrame to a CSV file.\n",
        "The load_to_db() function inserts the DataFrame into a SQLite database table.\n",
        "The run_query() function executes a SQL query to select countries with GDPs of at least 100 billion USD.\n",
        "The log_progress() function logs timestamps and messages to a file for tracking the progress of the ETL process.\n",
        "The code runs the ETL process, extracting, transforming, loading, and querying the GDP data.\n",
        "The code closes the SQL connection.\n",
        "\n",
        "Steps :-\n",
        "Step 1: Import libraries:\n",
        "The code imports the following libraries:\n",
        "BeautifulSoup: This library is used to parse HTML content.\n",
        "requests: This library is used to make HTTP requests to web servers. pandas: This library is used to work with dataframes. numpy: This library is used for numerical operations. sqlite3: This library is used to interact with SQLite databases. datetime: This library is used to work with dates and times.\n",
        "Step 2: Define variables:\n",
        "The code defines the following variables:\n",
        "url: This variable stores the URL of the Wikipedia page containing the GDP data. table_attribs: This list stores the names of the columns to be extracted from the Wikipedia table. db_name: This string stores the name of the SQLite database. table_name: This string stores the name of the SQLite table. csv_path: This string stores the path to the CSV file.\n",
        "Step 3: Extract data from Wikipedia:\n",
        "The extract() function scrapes the Wikipedia page using BeautifulSoup and extracts the data into a Pandas DataFrame. The function performs the following steps:\n",
        "Sends an HTTP request to the Wikipedia page using the requests library.\n",
        "Parses the HTML content of the response using BeautifulSoup.\n",
        "Locates the table containing the GDP data using BeautifulSoup.\n",
        "Extracts the data from the table into a list of dictionaries.\n",
        "Converts the list of dictionaries into a Pandas DataFrame.\n",
        "Step 4: Transform data:\n",
        "The transform() function converts the GDP values from millions to billions and renames the column to \"GDP_USD_billions\". The function performs the following steps:\n",
        "Iterates through the DataFrame and extracts the GDP values.\n",
        "Converts the GDP values from millions to billions by dividing by 1,000,000.\n",
        "Adds the transformed GDP values to a new column named \"GDP_USD_billions\".\n",
        "Step 5: Load data to CSV:\n",
        "The load_to_csv() function saves the DataFrame to a CSV file. The function performs the following steps:\n",
        "Opens the CSV file for writing.\n",
        "Writes the DataFrame to the CSV file.\n",
        "Closes the CSV file.\n",
        "Step 6: Load data to SQLite database:\n",
        "The load_to_db() function inserts the DataFrame into a SQLite database table. The function performs the following steps:\n",
        "Establishes a connection to the SQLite database.\n",
        "Creates a SQL INSERT statement using the DataFrame data.\n",
        "Executes the SQL INSERT statement to insert the data into the table.\n",
        "Closes the connection to the SQLite database.\n",
        "Step 7: Execute query:\n",
        "The run_query() function executes a SQL query to select countries with GDPs of at least 100 billion USD. The function performs the following steps:\n",
        "Generates a SQL SELECT statement to query the database for countries with GDPs of at least 100 billion USD.\n",
        "Executes the SQL SELECT statement and prints the results to the console.\n",
        "Step 8: Log progress:\n",
        "The log_progress() function logs timestamps and messages to a file for tracking the progress of the ETL process. The function performs the following steps:\n",
        "Generates a timestamp using the datetime library.\n",
        "Creates a message based on the current step in the ETL process.\n",
        "Opens a file for append mode.\n",
        "Writes the timestamp and message to the file.\n",
        "Closes the file.\n",
        "Step 9: Run ETL process:\n",
        "The code runs the ETL process, extracting, transforming, loading, and querying the GDP data. The process performs the following steps:\n",
        "Logs a message indicating that the preliminaries are complete and the ETL process is initiated.\n",
        "Extracts the data from the Wikipedia page using the extract() function.\n",
        "Logs a message indicating that the data extraction is complete and the transformation process is initiated.\n",
        "Transforms the data using the transform() function.\n",
        "Logs a message indicating that the transformation is complete and the loading process is initiated.\n",
        "Loads the data to a CSV file using the load_to_csv() function.\n",
        "Logs a message indicating that the data is saved to a CSV file.\n",
        "Establishes a connection to the SQLite database.\n",
        "Logs a message indicating that a connection to\n"
      ],
      "metadata": {
        "id": "4W42aF5bl5Qu"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XVttU3wp-18Q"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}